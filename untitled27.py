# -*- coding: utf-8 -*-
"""Untitled27.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1M9h1MHpJW7Z3FON7ptSBeQD6PVxzoZkp
"""

import pandas as pd

df=pd.read_csv('/content/healthcare-dataset-stroke-data.csv')

df

df.info()

df.shape

df.isnull().sum()

df.describe()

df.drop(columns=['id'], inplace=True)

import seaborn as sns
import matplotlib.pyplot as plt

plt.figure(figsize=(2,4))
sns.countplot(x='stroke', data=df)
plt.title('Stroke Distribution')
plt.xlabel('Stroke (0 = No, 1 = Yes)')
plt.ylabel('Count')
plt.show()

plt.figure(figsize=(6,5))
sns.histplot(data=df, x='age', hue='stroke')
plt.title('Age Distribution by Stroke')
plt.xlabel('Age')
plt.show()

plt.figure(figsize=(5,4))
sns.boxplot(x='stroke', y='bmi', data=df)
plt.title('BMI Distribution by Stroke')
plt.show()

plt.figure(figsize=(10,6))
corr = df.select_dtypes(include='number').corr()
sns.heatmap(corr, annot=True, cmap='coolwarm', fmt=".2f")
plt.title("Correlation Heatmap")
plt.show()

plt.figure(figsize=(3,4))
sns.countplot(x='gender', data=df)
plt.title("Gender Distribution")
plt.show()

plt.figure(figsize=(10,6))
sns.countplot(data=df, x='work_type', hue='stroke')
plt.title("Stroke by Work Type")
plt.xticks(rotation=35)
plt.show()

import pandas as pd
import numpy as np
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.impute import SimpleImputer
from sklearn.model_selection import train_test_split

df = pd.read_csv('/content/healthcare-dataset-stroke-data.csv')

df

df.drop(columns=['id'], inplace=True)

num_imputer = SimpleImputer(strategy='mean')
df['bmi'] = num_imputer.fit_transform(df[['bmi']])

cat_cols = df.select_dtypes(include='object').columns
label_encoders = {}
for col in cat_cols:
    le = LabelEncoder()
    df[col] = le.fit_transform(df[col])
    label_encoders[col] = le

scaler = StandardScaler()
num_cols = df.select_dtypes(include=np.number).columns.drop('stroke')
df[num_cols] = scaler.fit_transform(df[num_cols])

X = df.drop('stroke', axis=1)
y = df['stroke']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

print("‚úÖ Data preprocessing completed. Ready for modeling!")

from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
from sklearn.ensemble import RandomForestClassifier

label_encoders = {}
for col in df.select_dtypes(include='object').columns:
    le = LabelEncoder()
    df[col] = le.fit_transform(df[col])
    label_encoders[col] = le

scaler = StandardScaler()
X = df.drop('stroke', axis=1)
X_scaled = scaler.fit_transform(X)
y = df['stroke']

X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

y_pred = model.predict(X_test)

print("üîç Accuracy Score:", accuracy_score(y_test, y_pred))
print("\nüìä Confusion Matrix:\n", confusion_matrix(y_test, y_pred))
print("\nüìÑ Classification Report:\n", classification_report(y_test, y_pred))

from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

log_model = LogisticRegression(max_iter=1000)
log_model.fit(X_train, y_train)
log_preds = log_model.predict(X_test)

print("üîπ Logistic Regression Results")
print("Accuracy:", accuracy_score(y_test, log_preds))
print(classification_report(y_test, log_preds))
print(confusion_matrix(y_test, log_preds))
print("="*50)

tree_model = DecisionTreeClassifier(random_state=42)
tree_model.fit(X_train, y_train)
tree_preds = tree_model.predict(X_test)

print("üîπ Decision Tree Results")
print("Accuracy:", accuracy_score(y_test, tree_preds))
print(classification_report(y_test, tree_preds))
print(confusion_matrix(y_test, tree_preds))
print("="*50)

rf_model = RandomForestClassifier(n_estimators=100, random_state=42)
rf_model.fit(X_train, y_train)
rf_preds = rf_model.predict(X_test)

print("üîπ Random Forest Results")
print("Accuracy:", accuracy_score(y_test, rf_preds))
print(classification_report(y_test, rf_preds))
print(confusion_matrix(y_test, rf_preds))
print("="*50)

